-- Name and path of this file must be the same as the name and path you would 
-- like the students to use at the submission command;
--    if you like the submission command to be:
--    $ ~professorId/submit oop345A/ws/2<ENTER>
--    then this file should be copied under the name "2.cfg" in the
--    "sumbitter_files/oop345/ws" directory.
--    then for this submission you should modify its values base on your needs.

-- format for configuration values:
-- value_name|value1, value2, value3,...
-- all the values must be in the same line (you can not goto new line for values)
-- all the values below are examples and should change based on your subject

--Subject Code
  subject_code|OOP244

--Professor Linux userid
  userid|fardad.soleimanloo

--Professor and Teacher's assisstants emails
--you can add more emails to send a copy of submission to TAs
  prof_email|fardad.soleimanloo@senecapolytechnic.ca
  

--Assignment name
  assessment_name | Workshop

-- Announcement file name
-- format : announcement | filename
-- if not commented, looks for the "filename" in your submitter files directory
-- then copies the exact content at the begging of submission process
--   announcement | message.txt

-- Due dates and time, and thier titles 
-- You can have one or many due dates as long as they are coupled with their 
--     corresponding title
-- Format: due_dates | YYYY/MON/DAY-HH24:MIN, title1[, YYYY/MON/DAY-HH24:MIN, title2].... 
-- title 1 will be applied to the submissions between date one and two and title2 
-- will be applied to submissions between date two and three and etc...
-- the due date and time can be set,if the time is ommited it will be set to 23:59 

-- uncomment the line below to activate due date check
   due_dates|2024-08-23 22:00, late -40%, 2024-08-23, rejected

-- publication date
-- format: publish_date | YYYY/MON/DAY-HH24:MIN
-- submissions before this date will be rejected
-- but students can dry run the submission using -feedback option
-- uncomment the line below to activate the publication date check
  publish_date | 2024-08-22


-- rejection date
-- format: rejection_date | YYYY/MON/DAY-HH24:MIN
-- sumbissions after this date and time are rejected.
-- uncomment the line below to activate the rejection date check
  rejection_date | 2024-08-23 


--files that must exist for a successful submission (or compile)
--   Submission is rejected if any of these file do not exist at the
--   current directory
  assess_files | sample2.c
 
--files to archive after submission
--   This will be used in future to check for plagiarism
--   These are sub set of assess_files
--  archive_files | whatever.cpp , w2.cpp
 

--File names and thier path to be copied to student account from professor's
--submitter files directory for testing (tester programs, data files and etc)
--comment out the line if you don't need copying
--  copy_files | 244/w3/p1/w2_tester.cpp,  244/w3/p1/w2.data 


--The code will be compiled before submission if the value is yes
--compile code (yes, no)
  compile|yes


--compiler command
--if you want the program to be executed then this compile command should
--generate an exacutable with the same name as exe_name value (see next value)
  compile_command|g++ -Wall -std=c++11x -g -o w2


--executable name (must be the same as what the compiler command gererates)
  exe_name|w2


--files to compile (These files will be added to the compile at compile time
--this will be ignored if compile value is no
  compile_files|whatever.cpp,w2_tester.cpp


--error capture file name
--this file will hold the warnings and error resulted by compiling the code
  err_file|errors.txt

--Allow warnings in compilation (yes, no)
--If no is selected submission will be rejected
  allow_warning|no


--Execute the exe_name value after successful compilation
--execute (yes, no)
  execute|yes


--How to capture the output (script, redirect): 
--this will be ignored if check_output is no or execute is no)
--   "script", for interactive programs, typescript will be invoked
--   "redirect" or any other value, dump ouput to file for non-interactive programs
  output_type|script
        
        
--output file name
--the output of the execution or the typescript will be dumped in this
  output_file|student_output.txt



--compare the output to professor's; (yes, no)
--this will be ignored if execute value is no
--anything but "yes" will be considered as no value
--in this case the file for the output comparison should be copied to submitter_files dir.
--if skip_spaces exists and it is yes outputs will be checked for non space characters only 
--if the student chooses to do so by adding -skip_spaces to the submission command line
--if skip_blank_lines exists and it is yes outputs will be checked for non blank lines only 
--if the student chooses to do so by adding -skip_blank_lines to the submission command line
  check_output|yes 
  skip_spaces |yes
  skip_blank_lines |yes
  
  

--Check valgrind command ouput for memory leak
-- In case of valgrind output error messages the submission will be rejected only if
-- check_output is "yes"
--       To use this your exe_name must be : "valgrind -s --leak-check=full ws"
--       where ws is the generated executable by the compiler
--Possible values are yes, warn, no
--   yes, if there is memory leak it will not let the student submit code
--   warn, if there is memory lead it will warn the student but allows submission
--   no, or commenting check_valgrind will not check for memroy leak
  check_valgrind|warn


--comparison range, line numbers and line numbers to skip comparison 
-- values: from, to , skip1, skip2; integer numbers
--to specify the range of comparison 
--(in this example lines 16 to line 31 (inclusive) will be compared skipping lines 20 and 24)
  comp_range|16, 31 , 20 , 24



--filename for the original output (correct output) in submitter_files dir.
--this will be ignored if check_output is no
  correct_output|correct_output.txt



--files to be emailed as submission. (if any of them is missing assingment 
--  can not be sumbitted)
--if commented the script will only test the output and nothing will be submitted.
  submit_files |whatever.cpp,whatever.h,reflect.txt

  
--CC (email) the submission to the student
--Commenting out these option is the same as a yes value
--"yes" and "no" are acceptable values
  CC_student|yes


--If CC_student is yes  
--  Attach the submitted files to the student confirmation email
--  Commenting out this option is the same as a yes value
  CC_student_files|yes


--Enforce submission location by adding accptable ip numbers only if the 
--  submission is ontime and they student is not accomodated.
--By uncommenting this value and adding these sub ips you 
--  can enforce the students' location:
--Format: 
--allowed_ips|Partial IP[,partial IP1]...
--for example the following restrict the submission to come from 
--anywhere from seneca: (allowed_ips|142.204. , 10.)
--to restrict submission from a lab computer at Seneca, find the ip of 
--one of the lab computers and add the first three numbers (ie. 10.23.34.)
--uncomment the following to activate location restriction
  allowed_ips|142.204. , 10.
